# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: schedulerAPI # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

plugins:
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createResource:
    handler: Resource/handlers/createResource.createResource
    name: createResource
    events:
      - http:
          method: POST
          path: /resource
          resp: https
          cors: true
          integration: lambda-proxy

  getResourceByEmail:
    handler: Resource/handlers/getResourceByEmail.getResourceByEmail
    name: getResourceByEmail
    events:
      - http:
          method: GET
          path: /resource/email/{email}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              paths:
                id: true

  createBookable:
    handler: Bookable/handlers/createBookable.createBookable
    name: createBookable
    events:
      - http:
          method: POST
          path: /bookable
          resp: https
          cors: true
          integration: lambda-proxy
  
  getBookableByResourceId:
    handler: Bookable/handlers/getBookableByResourceId.getBookableByResourceId
    name: getBookableByResourceId
    events:
      - http:
          method: GET
          path: /bookable/resource/{resourceId}
          resp: https
          cors: true
          integration: lambda-proxy

  createHours:
    handler: Hours/handlers/createHours.createHours
    name: createHours
    events:
      - http:
          method: POST
          path: /hours
          resp: https
          cors: true
          integration: lambda-proxy

  getHoursByResourceId:
    handler: Hours/handlers/getHoursByResourceId.getHoursByResourceId
    name: getHoursByResourceId
    events:
      - http:
          method: GET
          path: /hours/resource/{resourceId}
          resp: https
          cors: true
          integration: lambda-proxy

  createClient:
    handler: Client/handlers/createClient.createClient
    name: createClient
    events:
      - http:
          method: POST
          path: /client
          resp: https
          cors: true
          integration: lambda-proxy

  getClientByEmail:
    handler: Client/handlers/getClientByEmail.getClientByEmail
    name: getClientByEmail
    events:
      - http:
          method: GET
          path: /client/email/{email}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              paths:
                id: true
  getAvailability:
    handler: Availability/handlers/getAvailabilities.getAvailabilities
    name: getAvailability
    events:
      - http:
          method: GET
          path: /availabilities/{resourceId}/{bookableId}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              querystrings:
                start: true ## todo
                interval: true ## todo
                limit: true ## todo
          # getBookableByResourceId

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
