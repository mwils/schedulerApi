service: schedulerAPI

provider:
  name: aws
  runtime: nodejs8.10

plugins:
  - serverless-offline

functions:
  createResource:
    handler: Resource/handlers/createResource.createResource
    name: createResource
    events:
      - http:
          method: POST
          path: /resource
          resp: https
          cors: true
          integration: lambda-proxy

  getResourceByEmail:
    handler: Resource/handlers/getResourceByEmail.getResourceByEmail
    name: getResourceByEmail
    events:
      - http:
          method: GET
          path: /resource/email/{email}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              paths:
                id: true

  createBookable:
    handler: Bookable/handlers/createBookable.createBookable
    name: createBookable
    events:
      - http:
          method: POST
          path: /bookable
          resp: https
          cors: true
          integration: lambda-proxy
  
  getBookableByResourceId:
    handler: Bookable/handlers/getBookableByResourceId.getBookableByResourceId
    name: getBookableByResourceId
    events:
      - http:
          method: GET
          path: /bookable/resource/{resourceId}
          resp: https
          cors: true
          integration: lambda-proxy

  createHours:
    handler: Hours/handlers/createHours.createHours
    name: createHours
    events:
      - http:
          method: POST
          path: /hours
          resp: https
          cors: true
          integration: lambda-proxy

  getHoursByResourceId:
    handler: Hours/handlers/getHoursByResourceId.getHoursByResourceId
    name: getHoursByResourceId
    events:
      - http:
          method: GET
          path: /hours/resource/{resourceId}
          resp: https
          cors: true
          integration: lambda-proxy

  createClient:
    handler: Client/handlers/createClient.createClient
    name: createClient
    events:
      - http:
          method: POST
          path: /client
          resp: https
          cors: true
          integration: lambda-proxy

  getClientByEmail:
    handler: Client/handlers/getClientByEmail.getClientByEmail
    name: getClientByEmail
    events:
      - http:
          method: GET
          path: /client/email/{email}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              paths:
                id: true
  getAvailability:
    handler: Availability/handlers/getAvailabilities.getAvailabilities
    name: getAvailability
    events:
      - http:
          method: GET
          path: /availabilities/{resourceId}/{bookableId}
          resp: https
          cors: true
          integration: lambda-proxy
          request:
            parameters:
              querystrings:
                start: true ## todo
                interval: true ## todo
                limit: true ## todo
                